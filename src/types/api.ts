/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List projects
         * @description Retrieve all projects owned by the authenticated user.
         */
        get: operations["v1_projects_retrieve"];
        put?: never;
        /**
         * Create projects
         * @description Create multiple projects for the authenticated user. Duplicate names are automatically removed.
         */
        post: operations["v1_projects_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{project_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project details
         * @description Retrieve details of a specific project.
         */
        get: operations["v1_projects_retrieve_2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update project
         * @description Update an existing project.
         */
        patch: operations["v1_projects_partial_update"];
        trace?: never;
    };
    "/api/v1/projects/{project_id}/sessions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List sessions
         * @description Retrieve all sessions for a specific project.
         */
        get: operations["v1_projects_sessions_retrieve"];
        put?: never;
        /**
         * Create session
         * @description Create a new session for a project. The session will be assigned a unique UUID and can optionally reference a parent session for threaded conversations.
         */
        post: operations["v1_projects_sessions_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{project_id}/sessions/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get session details
         * @description Retrieve details of a specific session.
         */
        get: operations["v1_projects_sessions_retrieve_2"];
        put?: never;
        post?: never;
        /**
         * Delete session
         * @description Delete an existing session. This action is irreversible and will also affect any child sessions that reference this session as a parent.
         */
        delete: operations["v1_projects_sessions_destroy"];
        options?: never;
        head?: never;
        /**
         * Update session
         * @description Update an existing session with new content, status, or messages. This endpoint supports partial updates.
         */
        patch: operations["v1_projects_sessions_partial_update"];
        trace?: never;
    };
    "/api/v1/projects/{project_id}/sessions/{id}/processing/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start session processing
         * @description Mark a session as in progress by updating its status to IN_PROGRESS. This endpoint is typically used when beginning to process a session that was created but not yet started.
         */
        post: operations["v1_projects_sessions_processing_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/user/sessions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List user pending sessions
         * @description Retrieve all pending sessions (status=CREATED) for the authenticated user across all projects they have access to. Results are paginated.
         */
        get: operations["v1_projects_user_sessions_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Authenticate user and receive access token */
        post: operations["v1_users_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Logout current user and invalidate current token */
        post: operations["v1_users_logout_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/logoutall": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Logout user from all devices and invalidate all tokens */
        post: operations["v1_users_logoutall_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the user profile */
        get: operations["v1_users_me_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Register a new user account */
        post: operations["v1_users_register_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Request password reset token for user email */
        post: operations["v1_users_reset_password_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/update-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Update user password using reset token */
        post: operations["v1_users_update_password_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AuthToken: {
            username: string;
            password: string;
            readonly token: string;
        };
        LoginResponse: {
            /** @description Authentication token for subsequent requests */
            token: string;
            /**
             * Format: date-time
             * @description Token expiration timestamp
             */
            expiry: string;
        };
        LogoutAllResponse: {
            /**
             * @description Logout confirmation message
             * @default Successfully logged out.
             */
            detail: string;
        };
        LogoutResponse: {
            /**
             * @description Logout confirmation message
             * @default Successfully logged out.
             */
            detail: string;
        };
        PaginationInfo: {
            /** @description Current page number */
            page: number;
            /** @description Number of items per page */
            page_size: number;
            /** @description Total number of pages */
            total_pages: number;
            /** @description Total number of items */
            total_count: number;
        };
        PatchedProjectUpdate: {
            display_name?: string;
        };
        PatchedSessionUpdate: {
            status?: components["schemas"]["StatusEnum"];
            raw_content?: string;
            json_content?: unknown;
            messages?: unknown[];
            /** Format: uuid */
            session_id?: string;
        };
        Project: {
            readonly id: number;
            name: string;
        };
        ProjectCreate: {
            projects: string[];
        };
        ProjectCreateErrorResponse: {
            /** @description Error messages organized by field */
            errors: {
                [key: string]: unknown;
            };
            /** @description No data returned for error responses */
            data: string | null;
        };
        ProjectCreateResponse: {
            /** @description Error messages organized by field */
            errors: {
                [key: string]: unknown;
            } | null;
            /** @description Created projects */
            data: components["schemas"]["Project"][];
        };
        ProjectDetailResponse: {
            /** @description Error messages organized by field */
            errors: {
                [key: string]: unknown;
            } | null;
            /** @description Project details */
            data: components["schemas"]["Project"];
        };
        ProjectListResponse: {
            /** @description Error messages organized by field */
            errors: {
                [key: string]: unknown;
            } | null;
            /** @description List of user projects */
            data: components["schemas"]["Project"][];
        };
        ProjectUpdateErrorResponse: {
            /** @description Error messages organized by field */
            errors: {
                [key: string]: unknown;
            };
            /** @description No data returned for error responses */
            data: string | null;
        };
        ProjectUpdateResponse: {
            /** @description Error messages organized by field */
            errors: {
                [key: string]: unknown;
            } | null;
            /** @description Updated project details */
            data: components["schemas"]["Project"];
        };
        RequestRegisterUser: {
            /** Format: email */
            email: string;
            password: string;
            username: string;
        };
        RequestResetPassword: {
            /** Format: email */
            email: string;
        };
        RequestUpdatePasswordUser: {
            token: string;
            password: string;
        };
        Session: {
            readonly id: number;
            /** Format: uuid */
            session_id: string;
            readonly parent_session: string;
            /** Format: uuid */
            readonly parent_session_uuid: string;
            readonly project: components["schemas"]["Project"];
            readonly message: string;
        };
        SessionCreate: {
            parent_session?: number | null;
            message: string;
        };
        SessionCreateErrorResponse: {
            /** @description Error messages organized by field */
            errors: {
                [key: string]: unknown;
            };
            /** @description No data returned for error responses */
            data: string | null;
        };
        SessionCreateResponse: {
            /** @description Error messages organized by field */
            errors: {
                [key: string]: unknown;
            } | null;
            /** @description Created session details */
            data: components["schemas"]["Session"];
        };
        SessionDetailResponse: {
            /** @description Error messages organized by field */
            errors: {
                [key: string]: unknown;
            } | null;
            /** @description Session details */
            data: components["schemas"]["Session"];
        };
        SessionListResponse: {
            /** @description Error messages organized by field */
            errors: {
                [key: string]: unknown;
            } | null;
            /** @description List of project sessions */
            data: components["schemas"]["Session"][];
        };
        SessionProcessingErrorResponse: {
            /** @description Error message structure with message and details */
            errors: {
                [key: string]: unknown;
            };
            /** @description No data returned for error responses */
            data: string | null;
        };
        SessionProcessingResponse: {
            /** @description No errors for successful message responses */
            errors: string | null;
            /** @description Success message */
            data: string;
        };
        SessionUpdateErrorResponse: {
            /** @description Error messages organized by field */
            errors: {
                [key: string]: unknown;
            };
            /** @description No data returned for error responses */
            data: string | null;
        };
        SessionUpdateResponse: {
            /** @description Error messages organized by field */
            errors: {
                [key: string]: unknown;
            } | null;
            /** @description Updated session details */
            data: components["schemas"]["Session"];
        };
        /**
         * @description * `DRAFT` - Draft
         *     * `CREATED` - Created
         *     * `SUCCEEDED` - Succeeded
         *     * `FAILED` - Failed
         *     * `IN_PROGRESS` - In progress
         * @enum {string}
         */
        StatusEnum: "DRAFT" | "CREATED" | "SUCCEEDED" | "FAILED" | "IN_PROGRESS";
        UserPendingSessionListResponse: {
            /** @description Error messages if any */
            errors: string | null;
            /** @description List of user pending sessions */
            data: components["schemas"]["Session"][];
            pagination: components["schemas"]["PaginationInfo"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    v1_projects_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved projects list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_projects_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["ProjectCreate"];
                "multipart/form-data": components["schemas"]["ProjectCreate"];
                "application/json": components["schemas"]["ProjectCreate"];
            };
        };
        responses: {
            /** @description Projects created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectCreateResponse"];
                };
            };
            /** @description Invalid data provided */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectCreateErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_projects_retrieve_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved project details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_projects_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProjectUpdate"];
                "multipart/form-data": components["schemas"]["PatchedProjectUpdate"];
                "application/json": components["schemas"]["PatchedProjectUpdate"];
            };
        };
        responses: {
            /** @description Project updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectUpdateResponse"];
                };
            };
            /** @description Invalid data provided */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectUpdateErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_projects_sessions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved sessions list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_projects_sessions_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["SessionCreate"];
                "multipart/form-data": components["schemas"]["SessionCreate"];
                "application/json": components["schemas"]["SessionCreate"];
            };
        };
        responses: {
            /** @description Session created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionCreateResponse"];
                };
            };
            /** @description Invalid data provided */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionCreateErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_projects_sessions_retrieve_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved session details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_projects_sessions_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Session deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_projects_sessions_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PatchedSessionUpdate"];
                "multipart/form-data": components["schemas"]["PatchedSessionUpdate"];
                "application/json": components["schemas"]["PatchedSessionUpdate"];
            };
        };
        responses: {
            /** @description Session updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionUpdateResponse"];
                };
            };
            /** @description Invalid data provided */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionUpdateErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_projects_sessions_processing_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Session status updated to in progress */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionProcessingResponse"];
                };
            };
            /** @description Failed to update session status */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionProcessingErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_projects_user_sessions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved user pending sessions list with pagination */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPendingSessionListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_users_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["AuthToken"];
                "multipart/form-data": components["schemas"]["AuthToken"];
                "application/json": components["schemas"]["AuthToken"];
            };
        };
        responses: {
            /** @description Login successful, access token provided in response and cookie */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_users_logout_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User logged out successfully, access token cookie cleared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogoutResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_users_logoutall_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User logged out from all devices, all tokens invalidated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogoutAllResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_users_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body means the endpoint responded successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_users_register_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["RequestRegisterUser"];
                "multipart/form-data": components["schemas"]["RequestRegisterUser"];
                "application/json": components["schemas"]["RequestRegisterUser"];
            };
        };
        responses: {
            /** @description User account created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_users_reset_password_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["RequestResetPassword"];
                "multipart/form-data": components["schemas"]["RequestResetPassword"];
                "application/json": components["schemas"]["RequestResetPassword"];
            };
        };
        responses: {
            /** @description Password reset token generated and sent (always returns 200 for security) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_users_update_password_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["RequestUpdatePasswordUser"];
                "multipart/form-data": components["schemas"]["RequestUpdatePasswordUser"];
                "application/json": components["schemas"]["RequestUpdatePasswordUser"];
            };
        };
        responses: {
            /** @description Password updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
