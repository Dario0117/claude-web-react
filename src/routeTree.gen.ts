/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as unauthenticatedRouteRouteImport } from './routes/(unauthenticated)/route'
import { Route as authenticatedRouteRouteImport } from './routes/(authenticated)/route'
import { Route as authenticatedIndexRouteImport } from './routes/(authenticated)/index'
import { Route as unauthenticatedResetPasswordRouteImport } from './routes/(unauthenticated)/reset-password'
import { Route as unauthenticatedRegisterRouteImport } from './routes/(unauthenticated)/register'
import { Route as unauthenticatedLoginRouteImport } from './routes/(unauthenticated)/login'
import { Route as authenticatedQueuedSessionsRouteImport } from './routes/(authenticated)/queued-sessions'
import { Route as authenticatedProjectsRouteImport } from './routes/(authenticated)/projects'
import { Route as authenticatedDraftsRouteImport } from './routes/(authenticated)/drafts'
import { Route as authenticatedDevicesRouteImport } from './routes/(authenticated)/devices'
import { Route as authenticatedApiRouteImport } from './routes/(authenticated)/api'
import { Route as unauthenticatedUpdatePasswordTokenRouteImport } from './routes/(unauthenticated)/update-password.$token'

const unauthenticatedRouteRoute = unauthenticatedRouteRouteImport.update({
  id: '/(unauthenticated)',
  getParentRoute: () => rootRouteImport,
} as any)
const authenticatedRouteRoute = authenticatedRouteRouteImport.update({
  id: '/(authenticated)',
  getParentRoute: () => rootRouteImport,
} as any)
const authenticatedIndexRoute = authenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => authenticatedRouteRoute,
} as any)
const unauthenticatedResetPasswordRoute =
  unauthenticatedResetPasswordRouteImport.update({
    id: '/reset-password',
    path: '/reset-password',
    getParentRoute: () => unauthenticatedRouteRoute,
  } as any)
const unauthenticatedRegisterRoute = unauthenticatedRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => unauthenticatedRouteRoute,
} as any)
const unauthenticatedLoginRoute = unauthenticatedLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => unauthenticatedRouteRoute,
} as any)
const authenticatedQueuedSessionsRoute =
  authenticatedQueuedSessionsRouteImport.update({
    id: '/queued-sessions',
    path: '/queued-sessions',
    getParentRoute: () => authenticatedRouteRoute,
  } as any)
const authenticatedProjectsRoute = authenticatedProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => authenticatedRouteRoute,
} as any)
const authenticatedDraftsRoute = authenticatedDraftsRouteImport.update({
  id: '/drafts',
  path: '/drafts',
  getParentRoute: () => authenticatedRouteRoute,
} as any)
const authenticatedDevicesRoute = authenticatedDevicesRouteImport.update({
  id: '/devices',
  path: '/devices',
  getParentRoute: () => authenticatedRouteRoute,
} as any)
const authenticatedApiRoute = authenticatedApiRouteImport.update({
  id: '/api',
  path: '/api',
  getParentRoute: () => authenticatedRouteRoute,
} as any)
const unauthenticatedUpdatePasswordTokenRoute =
  unauthenticatedUpdatePasswordTokenRouteImport.update({
    id: '/update-password/$token',
    path: '/update-password/$token',
    getParentRoute: () => unauthenticatedRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof authenticatedIndexRoute
  '/api': typeof authenticatedApiRoute
  '/devices': typeof authenticatedDevicesRoute
  '/drafts': typeof authenticatedDraftsRoute
  '/projects': typeof authenticatedProjectsRoute
  '/queued-sessions': typeof authenticatedQueuedSessionsRoute
  '/login': typeof unauthenticatedLoginRoute
  '/register': typeof unauthenticatedRegisterRoute
  '/reset-password': typeof unauthenticatedResetPasswordRoute
  '/update-password/$token': typeof unauthenticatedUpdatePasswordTokenRoute
}
export interface FileRoutesByTo {
  '/': typeof authenticatedIndexRoute
  '/api': typeof authenticatedApiRoute
  '/devices': typeof authenticatedDevicesRoute
  '/drafts': typeof authenticatedDraftsRoute
  '/projects': typeof authenticatedProjectsRoute
  '/queued-sessions': typeof authenticatedQueuedSessionsRoute
  '/login': typeof unauthenticatedLoginRoute
  '/register': typeof unauthenticatedRegisterRoute
  '/reset-password': typeof unauthenticatedResetPasswordRoute
  '/update-password/$token': typeof unauthenticatedUpdatePasswordTokenRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(authenticated)': typeof authenticatedRouteRouteWithChildren
  '/(unauthenticated)': typeof unauthenticatedRouteRouteWithChildren
  '/(authenticated)/api': typeof authenticatedApiRoute
  '/(authenticated)/devices': typeof authenticatedDevicesRoute
  '/(authenticated)/drafts': typeof authenticatedDraftsRoute
  '/(authenticated)/projects': typeof authenticatedProjectsRoute
  '/(authenticated)/queued-sessions': typeof authenticatedQueuedSessionsRoute
  '/(unauthenticated)/login': typeof unauthenticatedLoginRoute
  '/(unauthenticated)/register': typeof unauthenticatedRegisterRoute
  '/(unauthenticated)/reset-password': typeof unauthenticatedResetPasswordRoute
  '/(authenticated)/': typeof authenticatedIndexRoute
  '/(unauthenticated)/update-password/$token': typeof unauthenticatedUpdatePasswordTokenRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/api'
    | '/devices'
    | '/drafts'
    | '/projects'
    | '/queued-sessions'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/update-password/$token'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/api'
    | '/devices'
    | '/drafts'
    | '/projects'
    | '/queued-sessions'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/update-password/$token'
  id:
    | '__root__'
    | '/(authenticated)'
    | '/(unauthenticated)'
    | '/(authenticated)/api'
    | '/(authenticated)/devices'
    | '/(authenticated)/drafts'
    | '/(authenticated)/projects'
    | '/(authenticated)/queued-sessions'
    | '/(unauthenticated)/login'
    | '/(unauthenticated)/register'
    | '/(unauthenticated)/reset-password'
    | '/(authenticated)/'
    | '/(unauthenticated)/update-password/$token'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authenticatedRouteRoute: typeof authenticatedRouteRouteWithChildren
  unauthenticatedRouteRoute: typeof unauthenticatedRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(unauthenticated)': {
      id: '/(unauthenticated)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof unauthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authenticated)': {
      id: '/(authenticated)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authenticated)/': {
      id: '/(authenticated)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedIndexRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
    '/(unauthenticated)/reset-password': {
      id: '/(unauthenticated)/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof unauthenticatedResetPasswordRouteImport
      parentRoute: typeof unauthenticatedRouteRoute
    }
    '/(unauthenticated)/register': {
      id: '/(unauthenticated)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof unauthenticatedRegisterRouteImport
      parentRoute: typeof unauthenticatedRouteRoute
    }
    '/(unauthenticated)/login': {
      id: '/(unauthenticated)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof unauthenticatedLoginRouteImport
      parentRoute: typeof unauthenticatedRouteRoute
    }
    '/(authenticated)/queued-sessions': {
      id: '/(authenticated)/queued-sessions'
      path: '/queued-sessions'
      fullPath: '/queued-sessions'
      preLoaderRoute: typeof authenticatedQueuedSessionsRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
    '/(authenticated)/projects': {
      id: '/(authenticated)/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof authenticatedProjectsRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
    '/(authenticated)/drafts': {
      id: '/(authenticated)/drafts'
      path: '/drafts'
      fullPath: '/drafts'
      preLoaderRoute: typeof authenticatedDraftsRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
    '/(authenticated)/devices': {
      id: '/(authenticated)/devices'
      path: '/devices'
      fullPath: '/devices'
      preLoaderRoute: typeof authenticatedDevicesRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
    '/(authenticated)/api': {
      id: '/(authenticated)/api'
      path: '/api'
      fullPath: '/api'
      preLoaderRoute: typeof authenticatedApiRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
    '/(unauthenticated)/update-password/$token': {
      id: '/(unauthenticated)/update-password/$token'
      path: '/update-password/$token'
      fullPath: '/update-password/$token'
      preLoaderRoute: typeof unauthenticatedUpdatePasswordTokenRouteImport
      parentRoute: typeof unauthenticatedRouteRoute
    }
  }
}

interface authenticatedRouteRouteChildren {
  authenticatedApiRoute: typeof authenticatedApiRoute
  authenticatedDevicesRoute: typeof authenticatedDevicesRoute
  authenticatedDraftsRoute: typeof authenticatedDraftsRoute
  authenticatedProjectsRoute: typeof authenticatedProjectsRoute
  authenticatedQueuedSessionsRoute: typeof authenticatedQueuedSessionsRoute
  authenticatedIndexRoute: typeof authenticatedIndexRoute
}

const authenticatedRouteRouteChildren: authenticatedRouteRouteChildren = {
  authenticatedApiRoute: authenticatedApiRoute,
  authenticatedDevicesRoute: authenticatedDevicesRoute,
  authenticatedDraftsRoute: authenticatedDraftsRoute,
  authenticatedProjectsRoute: authenticatedProjectsRoute,
  authenticatedQueuedSessionsRoute: authenticatedQueuedSessionsRoute,
  authenticatedIndexRoute: authenticatedIndexRoute,
}

const authenticatedRouteRouteWithChildren =
  authenticatedRouteRoute._addFileChildren(authenticatedRouteRouteChildren)

interface unauthenticatedRouteRouteChildren {
  unauthenticatedLoginRoute: typeof unauthenticatedLoginRoute
  unauthenticatedRegisterRoute: typeof unauthenticatedRegisterRoute
  unauthenticatedResetPasswordRoute: typeof unauthenticatedResetPasswordRoute
  unauthenticatedUpdatePasswordTokenRoute: typeof unauthenticatedUpdatePasswordTokenRoute
}

const unauthenticatedRouteRouteChildren: unauthenticatedRouteRouteChildren = {
  unauthenticatedLoginRoute: unauthenticatedLoginRoute,
  unauthenticatedRegisterRoute: unauthenticatedRegisterRoute,
  unauthenticatedResetPasswordRoute: unauthenticatedResetPasswordRoute,
  unauthenticatedUpdatePasswordTokenRoute:
    unauthenticatedUpdatePasswordTokenRoute,
}

const unauthenticatedRouteRouteWithChildren =
  unauthenticatedRouteRoute._addFileChildren(unauthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  authenticatedRouteRoute: authenticatedRouteRouteWithChildren,
  unauthenticatedRouteRoute: unauthenticatedRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
